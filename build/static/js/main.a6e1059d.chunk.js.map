{"version":3,"sources":["App.js","serviceWorker.js","reducers/reducer.js","index.js"],"names":["connect","state","dispatch","addTodo","e","preventDefault","document","querySelector","value","trim","type","payload","deleteTodo","target","parentNode","id","sortTodo","props","react_default","a","createElement","name","className","onClick","map","item","key","text","date","toLocaleString","Boolean","window","location","hostname","match","initState","idCount","reducer","arguments","length","undefined","action","concat","Object","toConsumableArray","Date","filter","sort","b","store","createStore","ReactDOM","render","es","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0MAwBA,IAuBeA,cAvBS,SAACC,GACvB,MAAO,CACLA,UAIuB,SAACC,GAC3B,MAAO,CACLC,QAAS,SAACC,GACTA,EAAEC,iBACGC,SAASC,cAAc,SAASC,MAAMC,SAG1CP,EAAS,CAACQ,KAAM,MAAOC,QAASL,SAASC,cAAc,SAASC,QAChEF,SAASC,cAAc,SAASC,MAAQ,KAG1CI,WAAY,SAACR,GAAOF,EAAS,CAACQ,KAAM,SAAUC,QAASP,EAAES,OAAOC,WAAWC,MAC3EC,SAAU,WAAOd,EAAS,CAACQ,KAAM,YAKrBV,CAxCf,SAAaiB,GACX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACAF,EAAAC,EAAAC,cAAA,QAAMC,KAAK,YACTH,EAAAC,EAAAC,cAAA,SAAOV,KAAK,OAAOW,KAAK,aACxBH,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UAAUZ,KAAK,SAASa,QAASN,EAAMd,SAAzD,QAEFe,EAAAC,EAAAC,cAAA,UAAQE,UAAU,WAAWC,QAASN,EAAMD,UAA5C,QACAE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBACZL,EAAMhB,MAAMuB,IAAI,SAAAC,GAAI,OAAIP,EAAAC,EAAAC,cAAA,KAAGE,UAAU,YAAYI,IAAKD,EAAKV,GAAIA,GAAIU,EAAKV,IAAKU,EAAKE,KAA1D,MAAmEF,EAAKG,KAAKC,iBACtGX,EAAAC,EAAAC,cAAA,UAAQG,QAASN,EAAML,YAAvB,iBCNYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,6EClBAC,EAAY,GAIdC,EAAU,EAyBCC,EAvBC,WAA+B,IAA9BpC,EAA8BqC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtBH,EAAWM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC3C,MAAoB,QAAhBC,EAAO/B,KACR,GAAAgC,OAAAC,OAAAC,EAAA,EAAAD,CACC1C,GADD,CAEF,CACC0B,KAAMc,EAAO9B,QACbI,GAAIqB,IACJR,KAAM,IAAIiB,QAIQ,WAAhBJ,EAAO/B,KACAT,EAAM6C,OAAO,SAAArB,GAAI,OAAIA,EAAKV,MAAS0B,EAAO9B,UAEjC,SAAhB8B,EAAO/B,KACDiC,OAAAC,EAAA,EAAAD,CAAO1C,GACG8C,KAAK,SAAC5B,EAAE6B,GAC7B,OAAQ7B,EAAES,KAAOoB,EAAEpB,KAAQ,GAAK,IAGxB3B,GCjBLgD,EAAQC,YAAYb,GAE1Bc,IAASC,OAAOlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAUJ,MAAOA,GACb/B,EAAAC,EAAAC,cAACkC,EAAD,OACShD,SAASiD,eAAe,SFoH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a6e1059d.chunk.js","sourcesContent":["import React from 'react';\n\nimport { connect } from 'react-redux';\n\nimport './main.scss'\n\n\nfunction App(props) {\n  return (\n    <div>\n      <h1>To-do List</h1>\n      <form name='todoForm'>\n        <input type='text' name='todoText'></input>\n        <button className='add-btn' type='submit' onClick={props.addTodo}>Add</button>\n      </form>\n      <button className='sort-btn' onClick={props.sortTodo}>Sort</button>\n      <div className='items-container'>\n        {props.state.map(item => <p className='list-item' key={item.id} id={item.id}>{item.text} | {item.date.toLocaleString()}\n        <button onClick={props.deleteTodo}>Delete</button></p>)}\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    state\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n return {\n   addTodo: (e) => {\n    e.preventDefault();\n    if (!document.querySelector('input').value.trim()) {\n      return }\n     else {\n     dispatch({type: 'ADD', payload: document.querySelector('input').value});\n     document.querySelector('input').value = '';\n     }\n    },\n   deleteTodo: (e) => {dispatch({type: 'DELETE', payload: e.target.parentNode.id})},\n   sortTodo: () => {dispatch({type: 'SORT'})}\n }\n}\n\n\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = [\r\n\t\r\n]\r\n\r\nlet idCount = 0;\r\n\r\nconst reducer = (state = initState, action) => {\r\n    if (action.type === 'ADD') {\r\n       return [\r\n\t\t   ...state,\r\n\t\t   {\r\n\t\t\t   text: action.payload,\r\n\t\t\t   id: idCount++,\r\n\t\t\t   date: new Date()\r\n\t\t   }\r\n\t   ]\r\n    }\r\n    if (action.type === 'DELETE') {\r\n        return state.filter(item => item.id !== + action.payload)\r\n    }\r\n    if (action.type === 'SORT') {\r\n\t\tlet newArray = [...state]\r\n        return newArray.sort((a,b) => {\r\n\t\t\treturn (a.date < b.date) ? 1 : -1;\r\n\t\t})\r\n    }\r\n    return state\r\n}\r\n\r\nexport default reducer","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './reducers/reducer'\n\nconst store = createStore(reducer);\n\nReactDOM.render(<Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}